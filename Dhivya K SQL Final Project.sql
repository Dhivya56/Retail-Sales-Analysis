create database retailsales;
select * from retailsales.order_items;
drop table retailsales.order_items;
use retailsales;
select * from brands;
select * from customerss;
select * from order_items;
select * from ordersss;
select * from productss;
select * from staffs;
select * from stocks;
select * from stores;
select * from categories;

#Task 1
alter table retailsales.brands
add constraint  primary Key(brand_id);

alter table retailsales.customerss
add constraint  primary Key(customer_id);

alter table retailsales.ordersssss
add constraint  primary Key(order_id);

alter table retailsales.productss
add constraint  primary Key(product_id);

alter table retailsales.staffs
add constraint  primary Key(staff_id);

alter table retailsales.stores
add constraint  primary Key(store_id);

alter table retailsales.categories
add constraint  primary Key(categoryid);

select * from retailsales.categories
where categoryID is NULL;

#Task 3
#o Join orders, order_items, and products to display detailed line items. 

select a.order_id, a.item_id, a.product_id, a.quantity, a.list_price, a.discount, a.Total_Price,a.product_name,a.Categor_Id, 
a.Category_Name,b.customer_id,b.order_date,b.required_date,b.shipped_date,b.store_id,
b.staff_id,c.brand_id,c.modelyear from retailsales.order_items as a
inner join retailsales.ordersssss as b
on a.order_id = b.order_id
inner join retailsales.productss as c
on a.product_id = c.product_id;

#Task 4
#o Write a query to group sales (total_price) by each store_id.

select b.store_id, sum(a.Total_Price) as totalprice from retailsales.order_items as a
inner join retailsales.ordersssss as b
on a.order_id = b.order_id
group by b.store_id;

#Task 5
#Use ORDER BY and LIMIT to get the top 5 most sold products by quantity

select  count(b.quantity) as totalquantity, a.productname from retailsales.productss as a
inner join retailsales.order_items as b
on a.product_id = b.product_id
group by a.productname
order by totalquantity  desc
limit 5;

#Task 6
#For each customer, return total orders placed, total items purchased, and total revenue.

select a.customer_id, a.first_name, sum(c.quantity*c.list_price) as totalrevenue, 
count(c.order_id), sum(c.item_id) from retailsales.customerss as a
inner join retailsales.ordersssss as b
on a.customer_id = b.customer_id
inner join retailsales.order_items as c
on b.order_id = c.order_id
group by a.customer_id, a.first_name;


#Task 7
#Write a query to classify customers into spending brackets (e.g., low, medium, high).

select a.customer_id, a.first_name, a.last_name, sum(c.Total_Price) as totalspend, count(item_id),
case
when sum(c.Total_Price) > 2000 then "High"
when sum(c.Total_Price) > 1000 then "Medium"
else "Low"
end as Segment from retailsales.customerss as a
inner join retailsales.ordersssss as b
on a.customer_id = b.customer_id
inner join retailsales.order_items as c
on b.order_id = c.order_id
group by a.customer_id;

#Task 8
#Analyze total revenue generated by each staff member based on their handled orders

select b.first_name, b.last_name, b.staff_id, count(a.order_id), sum(c.total_price) from retailsales.ordersssss as a
inner join retailsales.staffs as b
on a.staff_id = b.staff_id
inner join retailsales.order_items as c
on a.order_id = c.order_id
group by b.first_name, b.last_name, b.staff_id;

#Task 9
#o Write a query to list products where stock quantity < 10 in any store.

select a.product_id, b.quantity, a.productname from retailsales.productss as a
inner join retailsales.stocks as b
on a.product_id = b.product_id
where quantity < 10;

#Task 10
#Create a table customer_segments that will be populated from Python ML results later.

create table retailsales.segment(
Segment_id Int Primary Key,
customer_id int,
product_id int,
totalrevenue int,
Total_Price int);


select * from retailsales.ordersssss;
set GLOBAL max_allowed_packet = 1073741824;
select * from retailsales.segment;
drop table retailsales.ordersss;
select * from retailsales.rfm;
select * from retailsales.frequency;


 



